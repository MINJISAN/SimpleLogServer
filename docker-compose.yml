version: '3.8'

services:
  simple-log-server:
    build: .
    container_name: simple-log-server
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - HOST=0.0.0.0
      - PORT=3000
      - RATE_LIMIT=100
      - ALLOWED_ORIGINS=*
    volumes:
      - ./logs:/app/user_logs
      - ./backups:/app/backups
    healthcheck:
      test: ["CMD", "node", "-e", "const http = require('http'); const options = { host: 'localhost', port: 3000, path: '/health', timeout: 2000 }; const request = http.request(options, (res) => { console.log('STATUS: ' + res.statusCode); process.exitCode = res.statusCode === 200 ? 0 : 1; }); request.on('error', function(err) { console.log('ERROR'); process.exitCode = 1; }); request.end();"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - log-network

  # Optional: Add a reverse proxy for SSL termination
  nginx:
    image: nginx:alpine
    container_name: simple-log-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - simple-log-server
    networks:
      - log-network
    profiles:
      - with-nginx

networks:
  log-network:
    driver: bridge

volumes:
  logs:
  backups:
